scalar JSON
scalar Date
scalar String
scalar Int
scalar ID


type User {
    _id: ID,
    password: String!
    email: String!
    name: String,
    proxy: Proxy,
    salary: Int,
    project: Project,
    workDuration: Int,
    level: Level,
    techStack: String,
    timeStamp: Int,
}

input UserInput {
    _id: ID,
    password: String!
    email: String!
    name: String,
    proxy: ProxyInput,
    salary: Int,
    project: ProjectInput,
    workDuration: Int,
    level: Level,
    timestamp: Int,
    techStack: String
}
input UserFilter {
    _id: ID,
    email: String
    name: String
    proxy: ProxyFilter,
    salary: Int,
    workDuration: Int,
    level: Level,
    timestamp: Int,
    techStack: String
    project: ProjectFilter
}
input UserSetFilter {
    name: String
    email: String
    proxy: ProxyFilter,
    salary: Int,
    workDuration: Int,
    level: Level,
    timestamp: Int,
    techStack: String
    project: ProjectSetFilter
}
input UpdateUsersInput {
    filter: UserFilter!
    set: UserSetFilter
}
input SignUpInput {
    name: String!,
    email: String!
    password: String!
}
input SignInInput {
    email: String!
    password: String!
}
type Query {
    getUsers(input: UserFilter): [User]
    auth: User
}


 type Mutation {
     deleteUsers(input: UserFilter): [User]
     updateUsers(input: UpdateUsersInput): [User]
     addUser(input: UserInput): User
     signUp(input: SignUpInput!): String!
     signIn(input: SignInInput!): String!
 }
